import numpy as np

class LassoRegressionScratch:
    def __init__(self, learning_rate=0.01, epochs=1000, alpha=1.0):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.alpha = alpha
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0

        for _ in range(self.epochs):
            for j in range(n_features):
                # Predict with current weights
                y_pred = X @ self.weights + self.bias

                # Calculate partial derivative with respect to w_j
                residual = y - y_pred + X[:, j] * self.weights[j]
                rho = X[:, j].T @ residual

                # Update w_j according to soft thresholding
                if rho < -self.alpha / 2:
                    self.weights[j] = (rho + self.alpha / 2) / np.sum(X[:, j]**2)
                elif rho > self.alpha / 2:
                    self.weights[j] = (rho - self.alpha / 2) / np.sum(X[:, j]**2)
                else:
                    self.weights[j] = 0

            # Update bias term
            self.bias = np.mean(y - X @ self.weights)

    def predict(self, X):
        return X @ self.weights + self.bias
